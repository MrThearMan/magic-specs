{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Magic value specification utilities pip install magic-specs Documentation : https://mrthearman.github.io/magic-specs/ Source Code : https://github.com/MrThearMan/magic-specs/ Contributing : https://github.com/MrThearMan/magic-specs/blob/main/CONTRIBUTING.md This library contains utilities for making definitions for magic values.","title":"Home"},{"location":"#magic-value-specification-utilities","text":"pip install magic-specs Documentation : https://mrthearman.github.io/magic-specs/ Source Code : https://github.com/MrThearMan/magic-specs/ Contributing : https://github.com/MrThearMan/magic-specs/blob/main/CONTRIBUTING.md This library contains utilities for making definitions for magic values.","title":"Magic value specification utilities"},{"location":"definition/","text":"Definition A Definition is like a combination of Enums and bidicts . They all do similar things, but, have some small differences. Comparison How to construct # Functional interface also available class MyEnum(Enum): A = 1 B = 2 my_bidict = bidict({\"A\": 1, \"B\": 2}) class MyDefinition(Definition): A = 1 B = 2 Value Access >>> print(MyEnum.A) <MyEnum.A: 1> >>> print(MyEnum[\"A\"]) <MyEnum.A: 1> >>> print(MyEnum.A.value) 1 >>> print(my_bidict[\"A\"]) 1 >>> print(MyDefinition.A) 1 >>> print(MyDefinition[\"A\"]) 1 Key access >>> print(MyEnum(1)) <MyEnum.A: 1> >>> print(MyEnum(1).value) \"A\" >>> print(my_bidict.inverse[1]) \"A\" >>> print(MyDefinition(1)) \"A\" Equality >>> MyEnum.A == 1 False >>> MyEnum.A.value == 1 True >>> my_bidict[\"A\"] == 1 True >>> MyDefinition.A == 1 True Uniqueness Enum: Duplicate values allowed by default, they are considered aliases , so reverse access will return the first key that defined the value. Can make value uniqueness requirement with @unique decorator bidict: Keys and values must be unique and hashable. Definition: Keys and values must be unique and hashable by default. Uniqueness can be turned off with class A(Definition, unique=False) , but in this mode reverse access is not allowed, since definitions are not considered each other's aliases. However, values can now be non-hashable, since reverse key map is not required. Benchmarks: \u2460 Creating 100 000 instances with 3 members (A=1, B=2, C=3): Enum: 5.1 s. bidict: 0.66 s. Definition: 1.1 s.","title":"Definition"},{"location":"definition/#definition","text":"A Definition is like a combination of Enums and bidicts . They all do similar things, but, have some small differences.","title":"Definition"},{"location":"definition/#comparison","text":"","title":"Comparison"},{"location":"definition/#how-to-construct","text":"# Functional interface also available class MyEnum(Enum): A = 1 B = 2 my_bidict = bidict({\"A\": 1, \"B\": 2}) class MyDefinition(Definition): A = 1 B = 2","title":"How to construct"},{"location":"definition/#value-access","text":">>> print(MyEnum.A) <MyEnum.A: 1> >>> print(MyEnum[\"A\"]) <MyEnum.A: 1> >>> print(MyEnum.A.value) 1 >>> print(my_bidict[\"A\"]) 1 >>> print(MyDefinition.A) 1 >>> print(MyDefinition[\"A\"]) 1","title":"Value Access"},{"location":"definition/#key-access","text":">>> print(MyEnum(1)) <MyEnum.A: 1> >>> print(MyEnum(1).value) \"A\" >>> print(my_bidict.inverse[1]) \"A\" >>> print(MyDefinition(1)) \"A\"","title":"Key access"},{"location":"definition/#equality","text":">>> MyEnum.A == 1 False >>> MyEnum.A.value == 1 True >>> my_bidict[\"A\"] == 1 True >>> MyDefinition.A == 1 True","title":"Equality"},{"location":"definition/#uniqueness","text":"Enum: Duplicate values allowed by default, they are considered aliases , so reverse access will return the first key that defined the value. Can make value uniqueness requirement with @unique decorator bidict: Keys and values must be unique and hashable. Definition: Keys and values must be unique and hashable by default. Uniqueness can be turned off with class A(Definition, unique=False) , but in this mode reverse access is not allowed, since definitions are not considered each other's aliases. However, values can now be non-hashable, since reverse key map is not required.","title":"Uniqueness"},{"location":"definition/#benchmarks","text":"\u2460 Creating 100 000 instances with 3 members (A=1, B=2, C=3): Enum: 5.1 s. bidict: 0.66 s. Definition: 1.1 s.","title":"Benchmarks:"}]}